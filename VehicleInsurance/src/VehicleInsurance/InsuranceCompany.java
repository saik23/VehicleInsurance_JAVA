package VehicleInsurance;

import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Main class that works as the InsuranceCompany that holds together all the information
 * regarding risks, plans, policies, users, claims, and settlements.
 * Lets the user create profiles, add vehicles to their profile, add plans and policies to each vehicle.
 * Records premium payments by users and generates receipts for each transaction.
 * Allows the user to create a claim against an incident and include any relevant information for the claim.
 * Settles the claim and does the payment to third-parties or the user based on the plan.
 */
public class InsuranceCompany {
    /**
     * Attributes for the InsuranceCompany Class.
     * planCounter : keeps track of the number of plans added to the system so far. Acts as key for the plan records.
     * planRecord : stores all the plans added to the system. Can be accessed using the planID.
     * vehicleRecord: stores all the vehicles added to the system. Uses a vehicle's registration number as the key.
     * policyCounter : keeps track of the number of policies created by the user and stored in the system.
     * policyRecord : stores all the policies added to the system. Uses policyID as the key.
     * customerCounter : keeps track of the number of customers added to the system.
     * customerRecord : stores all the customers added to the system. Uses customerID as the key.
     * claimCounter : keeps track of the number of claims added to the system.
     * claimRecord : stores all the claims added to the system. Uses a claimID as the key to retrieve records.
     * settlementCounter: keeps track of the number of settlements added to the system.
     * settlementRecord : stores all the settlements done by the system.
     * paymentCounter : keeps track of the payments done by the customers for the premiums.
     * paymentRecord : stores all the payments made by the customers. Uses the paymentID as key to retrieve records.
     * receiptCounter : keeps track of the number of receipts generated by the system.
     * receiptRecord : stores all the receipts generated by the system. Uses the receiptID as key to retrieve records.
     * planDetails : stores the relevant information for each plan decided by the Company. Includes the premium and
     * the coverage percentages, coverageCap and deathCoverage amounts for each type of plan.
     */
    private int planCounter;
    private int policyCounter;
    private int customerCounter;
    private int claimCounter;
    private int settlementCounter;
    private int paymentCounter;
    private int receiptCounter;

    private Map<String, Vehicle> vehicleRecord;
    private Map<Integer, InsurancePlan> planRecord;
    private Map<Integer, InsurancePolicy> policyRecord;
    private Map<Integer, Customer> customerRecord;
    private Map<Integer, Claim> claimRecord;
    private Map<Integer, Settlement> settlementRecord;
    private Map<Integer, Payment> paymentRecord;
    private Map<Integer, Receipt> receiptRecord;

    private Map<String, ArrayList<String>> planDetails;

    public InsuranceCompany() {
        planCounter = 0;
        policyCounter = 0;
        customerCounter = 0;
        claimCounter = 0;
        paymentCounter = 0;
        settlementCounter = 0;
        receiptCounter = 0;

        planRecord = new HashMap<>();
        policyRecord = new HashMap<>();
        customerRecord = new HashMap<>();
        vehicleRecord = new HashMap<>();
        claimRecord = new HashMap<>();
        paymentRecord = new HashMap<>();
        settlementRecord = new HashMap<>();
        receiptRecord = new HashMap<>();

        planDetails = new HashMap<>();

        // Set the plan details.
        // TODO: Make this dynamic.
        // TODO: Create a struct/class for this.
        ArrayList<String> obligatoryPlanDetails = new ArrayList<>();
        obligatoryPlanDetails.add("ThirdParty");
        obligatoryPlanDetails.add("0.1");
        obligatoryPlanDetails.add("0.2");
        obligatoryPlanDetails.add("1000");
        obligatoryPlanDetails.add("0");

        ArrayList<String> personalInjuryPlanDetails = new ArrayList<>();
        personalInjuryPlanDetails.add("PersonalInjury");
        personalInjuryPlanDetails.add("0.2");
        personalInjuryPlanDetails.add("0.4");
        personalInjuryPlanDetails.add("2500");
        personalInjuryPlanDetails.add("25000");

        ArrayList<String> vehicleDamagePlanDetails = new ArrayList<>();
        vehicleDamagePlanDetails.add("VehicleDamage");
        vehicleDamagePlanDetails.add("0.15");
        vehicleDamagePlanDetails.add("0.4");
        vehicleDamagePlanDetails.add("4000");
        vehicleDamagePlanDetails.add("0");

        ArrayList<String> vehicleAssistanceDetails = new ArrayList<>();
        vehicleAssistanceDetails.add("VehicleAssistance");
        vehicleAssistanceDetails.add("0.1");
        vehicleAssistanceDetails.add("0.3");
        vehicleAssistanceDetails.add("2000");
        vehicleAssistanceDetails.add("0");

        ArrayList<String> allCoverDetails = new ArrayList<>();
        allCoverDetails.add("ThirdParty PersonalInjury VehicleDamage VehicleAssistance");
        allCoverDetails.add("0.3");
        allCoverDetails.add("0.9");
        allCoverDetails.add("10000");
        allCoverDetails.add("100000");

        planDetails.put("Obligatory", obligatoryPlanDetails);
        planDetails.put("Injury", personalInjuryPlanDetails);
        planDetails.put("Damage", vehicleDamagePlanDetails);
        planDetails.put("Assistance", vehicleAssistanceDetails);
        planDetails.put("All", allCoverDetails);
    }

    /**
     * Getter method for the plan details set by the company for each type of plan.
     * @param key InsurancePlan type fixed by the company. One of : Obligatory, Injury, Damage, Assistance, All.
     * @return Plan details as a list of strings.
     */
    public ArrayList<String> getPlanDetails(String key) {
        return this.planDetails.get(key);
    }

    /**
     * update method to increment the customer counter.
     */
    public void incrementCustomerCounter() {
        this.customerCounter+=1;
    }

    /**
     * Getter method for the customer counter. This acts as the customer ID whenever a new customer is added to system.
     * @return customerID for a new customer.
     */
    public int getCustomerCounter() {
        return this.customerCounter;
    }

    /**
     * Update method for the plan counter.
     */
    public void incrementPlanCounter() {
        this.planCounter+=1;
    }

    /**
     * Getter method for the plan counter.
     * @return planID for the newly added plan to the system.
     */
    public int getPlanCounter() {
        return this.planCounter;
    }

    /**
     * Update method for the policy counter.
     */
    public void incrementPolicyCounter() {
        this.policyCounter += 1;
    }

    /**
     * Getter method for the policy counter. Returned value will be the policyID for a newly added policy
     * @return policyCounter.
     */
    public int getPolicyCounter() {
        return this.policyCounter;
    }

    /**
     * Getter method for the claim counter. Returned value will be used as key for the claim record.
     * @return claim counter
     */
    public int getClaimCounter() {
        return this.claimCounter;
    }

    /**
     * Increases the claim counter by 1 after adding a new claim to the system.
     */
    public void incrementClaimCounter() {
        this.claimCounter+=1;
    }

    /**
     * Getter method for the settlement counter.
     * @return settlementCounter.
     */
    public int getSettlementCounter() {return this.settlementCounter;}

    /**
     * Increases the settlement counter by 1 after adding a new settlement to the system.
     */
    public void incrementSettlementCounter() {this.settlementCounter+=1;}

    /**
     * Getter method for paymentCounter. Returned value can be used as key for the payment records.
     * @return paymentID for a payment stored in the system.
     */
    public int getPaymentCounter() {
        return this.paymentCounter;
    }

    /**
     * Increases the paymentCounter by 1 after adding a new payment to the system.
     */
    public void incrementPaymentCounter() {
        this.paymentCounter+=1;
    }

    /**
     * Getter method for the receiptCounter. Returned receiptID can be used as a key for the receiptRecord.
     * @return receiptCounter.
     */
    public int getReceiptCounter() {
        return this.receiptCounter;
    }

    /**
     * Increases the receiptCounter by 1 after adding a new receipt to the system.
     */
    public void incrementReceiptCounter() {
        this.receiptCounter+=1;
    }

    /**
     * Updates the vehicleRecords kept by the system by adding a key, value pair - registrationNumber, Vehicle.
     * @param registrationNumber vehicle's registration number
     * @param vehicle vehicle object to be added to the system
     */
    public void updateVehicleRecord(String registrationNumber, Vehicle vehicle) {
        this.vehicleRecord.put(registrationNumber, vehicle);
    }

    /**
     * Checks if a given vehicle is present in the system using its registration number.
     * @param registrationNumber registration number of the vehicle
     * @return true if present, false otherwise
     */
    public Boolean checkVehicleRecord(String registrationNumber) {
        return this.vehicleRecord.containsKey(registrationNumber);
    }

    /**
     * Getter method to retrieve a vehicle record from the system using its registration number.
     * @param registrationNumber vehicle's registration number
     * @return Vehicle object
     */
    public Vehicle getVehicleRecord(String registrationNumber) {
        return this.vehicleRecord.get(registrationNumber);
    }

    /**
     * Getter method to retrieve a customer record from the system using customerID
     * @param customerID ID of the customer.
     * @return Customer object stored in the records.
     */
    public Customer getCustomerRecord(int customerID) { return this.customerRecord.get(customerID); }

    /**
     * Checks if a given customer already exists in the system
     * @param customerID ID of the customer
     * @return true if the customerID belongs to a valid ID in the system, false otherwise
     */
    public Boolean checkCustomerRecord(int customerID) {
        return this.customerRecord.containsKey(customerID);
    }

    /**
     * Updates the customer record by adding a key, value pair: customerID, customer to the map.
     * @param customerID ID of the customer
     * @param customer Customer object
     */
    public void updateCustomerRecord(int customerID, Customer customer) {
        this.customerRecord.put(customerID, customer);
    }

    /**
     * Updates the planRecord by adding a key, value pair: planID, plan to the map
     * @param planID ID of the plan
     * @param insurancePlan InsurancePlan object
     */
    public void updatePlanRecord(int planID, InsurancePlan insurancePlan) {
        this.planRecord.put(planID, insurancePlan);
    }

    /**
     * Retrieves a plan object from the system using planID as key
     * @param planID ID of the plan used a key
     * @return InsurancePlan object
     */
    public InsurancePlan getPlanRecord(int planID) {return this.planRecord.get(planID);}

    /**
     * Updates the policy record by adding a key, value pair: policyID, insurancePolicy
     * @param policyID ID of the policy
     * @param insurancePolicy InsurancePolicy object.
     */
    public void updatePolicyRecord(int policyID, InsurancePolicy insurancePolicy) {
        this.policyRecord.put(policyID, insurancePolicy);
    }

    /**
     * Retrieves a policy object from the system using policyID as key
     * @param policyID ID of the policy
     * @return InsurancePolicy object
     */
    public InsurancePolicy getPolicyRecord(int policyID) {
        return this.policyRecord.get(policyID);
    }

    /**
     * Checks if the claimID exists in the system.
     * @param claimID ID of the claim to check.
     * @return Returns true if the claimID belongs to a valid claim in the system, false otherwise.
     */
    public Boolean checkClaimRecord(int claimID) {return this.claimRecord.containsKey(claimID);}

    /**
     * Retrieves a claim object from the system using claimID as key.
     * @param claimID ID for the claim to retrieve
     * @return Claim object
     */
    public Claim getClaimRecord(int claimID) {
        return this.claimRecord.get(claimID);
    }

    /**
     * Updates claimRecords by adding a key, value pair: claimID, Claim to the map
     * @param claimID : ID of the claim to add to the system.
     * @param claim Claim object to be added to the system.
     */
    public void updateClaimRecord(int claimID, Claim claim) {
        this.claimRecord.put(claimID, claim);
    }

    /**
     * Updates the settlement Record by adding a key, value pair: settlementID, settlement
     * @param settlementID ID of the settlement
     * @param settlement Settlement object to be added to the system.
     */
    public void updateSettlementRecord(int settlementID, Settlement settlement) {
        this.settlementRecord.put(settlementID, settlement);
    }

    /**
     * Retrieve a settlement object from the map using settlementID as key
     * @param settlementID ID of the settlement to be retrieved from the system.
     * @return Settlement object.
     */
    public Settlement getSettlementRecord(int settlementID) {
        return this.settlementRecord.get(settlementID);
    }

    /**
     * Update the paymentRecord by adding a key, value pair: paymentID, payment to the map.
     * @param paymentID ID of the payment to be added to the system.
     * @param payment Payment object to be added to the system.
     */
    public void updatePaymentRecord(int paymentID, Payment payment) {
        this.paymentRecord.put(paymentID, payment);
    }

    /**
     * Retrieve a payment from the system using the paymentID as key.
     * @param paymentID ID of the payment to retrieve
     * @return Payment object
     */
    public Payment getPaymentRecord(int paymentID) {
        return this.paymentRecord.get(paymentID);
    }

    /**
     * Updates the receipt record by adding a key, value pair: receiptID, receipt to the map
     * @param receiptID ID of the receipt to be added to the system
     * @param receipt Receipt object
     */
    public void updateReceiptRecord(int receiptID, Receipt receipt) {
        this.receiptRecord.put(receiptID, receipt);
    }

    /**
     * Retrieve a receipt from the system using receiptID
     * @param receiptID ID of the receipt
     * @return Receipt
     */
    public Receipt getReceiptRecord(int receiptID) {
        return this.receiptRecord.get(receiptID);
    }

    /**
     * Generates current date and time and returns it in MM-DD-YYYY HH:MM:SS format.
     * @return Date and time in string format.
     */
    public String getDateTime()
    {
        Date curDate = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");
        return formatter.format(curDate);
    }

    /**
     * Parses a given string to a list off Risk enum equivalents.
     * @param risks String containing Risks separated by space
     * @return List of Risks.
     */
    public ArrayList<Risk> parseStringToRisks(String risks)
    {
        ArrayList<Risk> risksCovered = new ArrayList<>();
        String[] strSplit = risks.split(" ");
        for(String str:strSplit)
        {
            risksCovered.add(Risk.valueOf(str));
        }
        return risksCovered;
    }

    /**
     * main function that creates a controller, view, and a model. Passes the control to controller and ends.
     * @param args
     */
    public static void main(String[] args) {
        BasicController controller = new BasicController(new InputStreamReader(System.in), System.out);

        InsuranceCompany insuranceCompany = new InsuranceCompany();
        View view = new View();

        controller.go(insuranceCompany, view);
    }
}

/**
 * A controller class for the insurance company. Interacts with view and models from the system.
 * Main method above only creates the model - InsuranceCompany Object and calls the controller.
 * Controller takes input from user, runs the model, ends the program after printing receipts.
 */
final class BasicController implements VehicleInsuranceController {
    private final Readable in;
    private final Appendable out;

    /**
     * Passes the input and output streams to the class variables
     *
     * @param in  Input stream (could be data coming in from files, console etc.)
     * @param out Output steam (could be data going to files, console etc.)
     */
    BasicController(Readable in, Appendable out) {
        this.in = in;
        this.out = out;
    }

    /**
     * Controller helper function to add a vehicle to the system.
     *
     * @param insuranceCompany model for the controller
     * @param scanner          input stream
     */
    public void goAddVehicle(InsuranceCompany insuranceCompany, Scanner scanner) {
        System.out.print("Enter the customerID you want to add this vehicle to: ");
        int customerID;
        try {
            customerID = scanner.nextInt();
            if(customerID < 0) {
                System.out.println("Please enter a valid customer ID.");
                return;
            }
        } catch (InputMismatchException e) {
            System.out.println("Please enter a valid customer ID.");
            return;
        }
        scanner.nextLine();

        if (!insuranceCompany.checkCustomerRecord(customerID)) {
            System.out.println("Please enter the customer into the system before adding vehicle to him.");
            return;
        }

        System.out.print("Enter the vehicle's registration number: ");
        String registrationNumber = scanner.nextLine();

        System.out.print("Enter the vehicle's current value: ");
        double currentValue;
        try {
            currentValue = scanner.nextDouble();
            if (currentValue < 0) {
                System.out.println("Please enter a positive value for the vehicle");
                return;
            }
        } catch (InputMismatchException e) {
            System.out.println("Please enter a numerical value for vehicle.");
            return;
        }

        scanner.nextLine();
        System.out.print("Enter the vehicle's current state (One of: New, Used-New, Used-good, Used-damaged, Old): ");
        String currentState = scanner.nextLine();
        Vehicle newVehicle = Vehicle.getBuilder().
                setRegistrationNumber(registrationNumber).
                setCurrentValue(currentValue).
                setCurrentState(currentState).
                setOwnerID(customerID).
                build();

        insuranceCompany.updateVehicleRecord(registrationNumber, newVehicle);
        Customer customer = insuranceCompany.getCustomerRecord(customerID);
        customer.updateVehicles(registrationNumber);
        System.out.println("New vehicle entered into the system:");
        System.out.println(newVehicle.toString());
    }

    /**
     * Helper function for the controller to add a plan to the system
     *
     * @param insuranceCompany model for the controller
     * @param scanner          input stream
     */
    public void goAddPlan(InsuranceCompany insuranceCompany, Scanner scanner) {

        // Get the vehicle details to add the plan.
        System.out.print("Enter the vehicle registration Number you want to add this plan to:");
        String vehicleRegistrationNumber = scanner.nextLine();

        // Check if the vehicle exists.
        if (!insuranceCompany.checkVehicleRecord(vehicleRegistrationNumber)) {
            System.out.println("Please enter the vehicle into the system before adding a plan to it.");
            return;
        }

        // Create a new Policy
        InsurancePolicy policy = new InsurancePolicy(insuranceCompany.getPolicyCounter(), vehicleRegistrationNumber);
        insuranceCompany.incrementPolicyCounter();

        ArrayList<String> options = new ArrayList<>();
        options.add("Obligatory");
        options.add("Damage");
        options.add("Injury");
        options.add("Assistance");
        options.add("All");

        System.out.print("Enter the type of plan you are looking from the following options" +
                "(Obligatory, Damage, Injury, Assistance, All): ");
        String planType = scanner.nextLine();

        if (!options.contains(planType)) {
            System.out.println("Please select a valid option.");
            return;
        }

        ArrayList<String> planDetails = insuranceCompany.getPlanDetails(planType);
        ArrayList<Risk> risksCovered = insuranceCompany.parseStringToRisks(planDetails.get(0));
        double premium = Double.parseDouble(planDetails.get(1));
        double coverage = Double.parseDouble(planDetails.get(2));
        double coverageCap = Double.parseDouble(planDetails.get(3));
        double deathCoverage = Double.parseDouble(planDetails.get(4));

        Vehicle vehicle = insuranceCompany.getVehicleRecord(vehicleRegistrationNumber);
        InsurancePlan insurancePlan = InsurancePlan.getBuilder().
                setPlanNumber(insuranceCompany.getPlanCounter()).
                setPremium(premium).
                setCoverage(coverage).
                setCoverageCap(coverageCap).
                setDeathCoverage(deathCoverage).
                setRisksCovered(risksCovered).
                setVehicleValue(vehicle.getCurrentValue()).
                build();
        insuranceCompany.incrementPlanCounter();

        // Update the policy with new plans and risks covered.
        policy.updatePlans(insurancePlan.getPlanNumber());
        policy.updateRisksCovered(risksCovered);

        // Update the records
        insuranceCompany.updatePlanRecord(insurancePlan.getPlanNumber(), insurancePlan);
        insuranceCompany.updatePolicyRecord(policy.getPolicyNumber(), policy);
        // update vehicle with the policy
        vehicle.addPolicy(policy);

        // Payment details for the plan.
        Customer vehicleOwner = insuranceCompany.getCustomerRecord(vehicle.getOwnerID());
        String dateTime = insuranceCompany.getDateTime();
        Payment newPayment = new Payment(vehicleOwner.getName(), insuranceCompany.getPaymentCounter(),
                insurancePlan.getPlanNumber(),
                insurancePlan.getPremium() * vehicle.getCurrentValue(), dateTime);

        insuranceCompany.incrementPaymentCounter();
        insuranceCompany.updatePaymentRecord(newPayment.getPaymentID(), newPayment);

        // Receipt for the payment.
        Receipt paymentReceipt = new Receipt(insuranceCompany.getReceiptCounter(),
                newPayment.getPaymentID(),
                "InsuranceCompany",
                vehicleOwner.getName(),
                dateTime,
                newPayment.getPremiumAmount()
        );
        insuranceCompany.incrementReceiptCounter();
        insuranceCompany.updateReceiptRecord(paymentReceipt.getReceiptID(), paymentReceipt);

        System.out.println("Premium amount for the plan: " + newPayment.getPremiumAmount());

        System.out.println("#########################################################################################");
        System.out.println("New plan added to the vehicle:");
        System.out.println(insurancePlan);

        System.out.println("#########################################################################################");
        System.out.println("Policy details:");
        System.out.println(policy);

        System.out.println("#########################################################################################");
        System.out.println("Receipt generated for the payment: ");
        System.out.println(paymentReceipt);
    }

    /**
     * Helper controller function to add a customer to the system.
     *
     * @param insuranceCompany model for the controller.
     * @param scanner          input stream.
     */
    public void goAddCustomer(InsuranceCompany insuranceCompany, Scanner scanner) {
        System.out.print("Enter the customer's name: ");
        String name = scanner.nextLine();
        System.out.print("Enter the customer's email ID: ");
        String contactInfo = scanner.nextLine();
        int customerID = insuranceCompany.getCustomerCounter();
        insuranceCompany.incrementCustomerCounter();
        Customer newCustomer = new Customer(customerID, name, contactInfo);

        // Update the records.
        insuranceCompany.updateCustomerRecord(newCustomer.getCustomerID(), newCustomer);
        System.out.println("New customer added");
        System.out.println(newCustomer);
    }

    /**
     * Helper controller function to add a claim to the system
     *
     * @param insuranceCompany model for the controller
     * @param scanner          input stream.
     */
    public void goClaim(InsuranceCompany insuranceCompany, Scanner scanner) {

        System.out.print("Enter the vehicle registration Number you want to add this plan to:");
        String vehicleRegistrationNumber = scanner.nextLine();
        // Check if the vehicle exists.
        if (!insuranceCompany.checkVehicleRecord(vehicleRegistrationNumber)) {
            System.out.println("Please enter the vehicle into the system before making claims for it.");
            return;
        }

        System.out.print("Enter the number of third parties involved in the claim:");
        int numberOfIncidents;
        try {
             numberOfIncidents = scanner.nextInt();
             if(numberOfIncidents<0) {
                 System.out.println("Please enter a valid number of entries.");
                 return;
             }
        } catch (InputMismatchException e) {
            System.out.println("Please enter a valid number of entries.");
            return;
        }
        scanner.nextLine();

        String dateTime = insuranceCompany.getDateTime();

        Claim claim = new Claim(insuranceCompany.getClaimCounter(), vehicleRegistrationNumber, dateTime);

        System.out.println("Enter the name, payment expected, justification " +
                "for each third party involved in the accident:");
        System.out.println("""
                Justification to be entered as follows:
                    For personal claims:
                        Enter VehicleDamage: to claim payments for damage to your vehicle
                        Enter PersonalInjury: to claim payments for injuries to self
                        Enter VehicleAssistance: to claim payments for assistance
                        Enter Death: to claim the deathCoverage from the plan in case of fatality
                    For any kind of payments to ThirdParty: Enter ThirdParty
                """);

        ArrayList<String> options = new ArrayList<>();
        options.add("VehicleDamage");
        options.add("PersonalInjury");
        options.add("VehicleAssistance");
        options.add("Death");
        options.add("ThirdParty");

        while (numberOfIncidents-- > 0) {
            System.out.print("Enter the name of the third party: ");
            String name3P = scanner.nextLine();

            System.out.print("Enter the compensation for the third party: ");
            double compensation;
            try {
                 compensation = scanner.nextDouble();
                 if(compensation < 0) {
                     System.out.println("Please enter a valid compensation amount");
                     return;
                 }
            } catch (InputMismatchException e) {
                System.out.println("Please enter a valid compensation amount.");
                return;
            }
            scanner.nextLine();

            System.out.print("Enter the justification for the compensation expected: ");
            String justification = scanner.nextLine();
            if(!options.contains(justification)) {
                System.out.println("Please enter a valid justification from the available options");
                return;
            }

            claim.updateDestinations(name3P);
            claim.updatePaymentsDue(compensation);
            claim.updateJustifications(justification);
        }

        // Add the claim to the system.
        insuranceCompany.updateClaimRecord(claim.getClaimID(), claim);
        insuranceCompany.incrementClaimCounter();

        System.out.println("Claim created");
        System.out.println(claim);
    }

    /**
     * Helper controller function to settle a claim
     *
     * @param insuranceCompany model for the controller
     * @param scanner          input stream
     */
    public void goSettle(InsuranceCompany insuranceCompany, Scanner scanner) {

        System.out.print("Enter the claim ID to settle: ");
        int claimID;
        try{
            claimID = scanner.nextInt();
            if(claimID < 0) {
                System.out.println("Please enter a valid claim ID");
                return;
            }
        } catch (InputMismatchException e) {
            System.out.println("Please enter a valid claim ID");
            return;
        }
        scanner.nextLine();

        if (!insuranceCompany.checkClaimRecord(claimID)) {
            System.out.println("Please enter a claim before attempting to settle it.");
            return;
        }
        Claim currentClaim = insuranceCompany.getClaimRecord(claimID);

        // Check if already settled
        if (currentClaim.getSettled()) {
            System.out.println("Claim already settled. Settlement IDs:" + currentClaim.getSettlements());
            return;
        }

        List<Double> paymentsDue = currentClaim.getPaymentsDue();
        List<String> destinations = currentClaim.getDestinations();
        List<String> justifications = currentClaim.getJustification();
        int numberOfParties = destinations.size();

        for (int thirdParty = 0; thirdParty < numberOfParties; thirdParty++) {
            // Create a settlement for each issue.
            Settlement newSettlement = new Settlement(insuranceCompany.getSettlementCounter(),
                    currentClaim.getClaimID(),
                    paymentsDue.get(thirdParty),
                    justifications.get(thirdParty),
                    currentClaim.getVehicle()
            );

            int planIdx = newSettlement.verifyClaim(insuranceCompany.getVehicleRecord(currentClaim.getVehicle()));
            if (planIdx == -1) {
                // Unable to settle.
                System.out.println("Unable to settle this claim due to lack of plans covering this risk.");
                newSettlement.markRejected();
            } else {
                // call settle on the plan.
                Boolean settled = newSettlement.settle(insuranceCompany.getPlanRecord(planIdx));
                if (!settled) {
                    System.out.println("Unable to settle this claim as the plan's coverage cap reached");
                }
            }

            insuranceCompany.updateSettlementRecord(newSettlement.getSettlementID(), newSettlement);
            insuranceCompany.incrementSettlementCounter();
            currentClaim.updateSettlements(newSettlement.getSettlementID());

            // If settlement successful print the receipt for the same and update the receipt records.
            System.out.println("Settlement details:" + newSettlement);
            if (!newSettlement.getRejected()) {
                // create and update Receipt records
                Receipt newReceipt = new Receipt(insuranceCompany.getReceiptCounter(),
                        newSettlement.getSettlementID(), destinations.get(thirdParty),
                        "InsuranceCompany", insuranceCompany.getDateTime(),
                        newSettlement.getPaymentDue());

                insuranceCompany.updateReceiptRecord(newReceipt.getReceiptID(), newReceipt);
                insuranceCompany.incrementReceiptCounter();
                System.out.println("Receipt for the settlement payout: " + newReceipt);
            }
        }

        currentClaim.markSettled();
        System.out.println("Settlements processed");
    }

    /**
     * Main function that runs in a loop taking commands from the user.
     *
     * @param insuranceCompany model for the controller
     * @param view             Output stream
     */
    public void go(InsuranceCompany insuranceCompany, View view) {
        Scanner scanner = new Scanner(this.in);

        view.displayInterface();
        view.displayControllerPrompt("What would you like to do today: ");

        while (scanner.hasNext()) {
            String inputCommand = scanner.nextLine();

            switch (inputCommand) {
                case "quit" -> {
                    view.displayControllerOut("You entered quit. Exiting the application.");
                    return;
                }
                case "add_vehicle" -> goAddVehicle(insuranceCompany, scanner);
                case "add_plan" -> goAddPlan(insuranceCompany, scanner);
                case "add_customer" -> goAddCustomer(insuranceCompany, scanner);
                case "claim" -> goClaim(insuranceCompany, scanner);
                case "settle" -> goSettle(insuranceCompany, scanner);
                default -> view.displayControllerOut("Unknown option detected. Please select again.");
            }
            view.displayControllerPrompt("What would you like to do today: ");
        }
    }

    public Readable in() {
        return in;
    }

    public Appendable out() {
        return out;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) return true;
        if (obj == null || obj.getClass() != this.getClass()) return false;
        var that = (BasicController) obj;
        return Objects.equals(this.in, that.in) &&
                Objects.equals(this.out, that.out);
    }

    @Override
    public int hashCode() {
        return Objects.hash(in, out);
    }

    @Override
    public String toString() {
        return "BasicController[" +
                "in=" + in + ", " +
                "out=" + out + ']';
    }

}